{"version":3,"sources":["../src/datasource.js"],"names":["_","signalfx","StreamHandler","SignalFxDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","authToken","jsonData","accessToken","headers","endpoint","replace","match","p1","p2","console","log","signalflow","window","streamer","SignalFlow","signalflowEndpoint","streams","interpolateQueryStr","bind","options","queries","filter","targets","t","hide","map","program","scopedVars","join","aliases","collectAliases","programOptions","getProgramOptions","Promise","resolve","data","handler","panelId","start","fromPairs","alias","flatMap","extractLabelsWithAlias","property","default_value","value","max","maxDelay","getMaxOption","resolutionMs","sampleSize","re","labels","m","exec","push","doRequest","method","then","response","status","message","title","query","metricNameQuery","getMetrics","propertyKeysQuery","getPropertyKeys","propertyValuesQuery","getPropertyValues","tagsQuery","getTags","when","doQueryRequest","mapMetricsToTextValue","result","results","text","d","metric","partialInput","doSuggestQueryRequest","mapPropertiesToTextValue","propertyKey","path","params","escapeQuery","limit","programText","packageSpecifications","request","programs","additionalFilters","additionalReplaceOnlyFilters","additionalQuery","JSON","stringify","datasourceRequest","variable","defaultFormatFn","multi","includeAll","escapeLiteral","quoteLiteral","escapedValues","String"],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright (C) 2019 SignalFx, Inc. All rights reserved.\nimport _ from \"lodash\";\nimport signalfx from './signalfx';\nimport {StreamHandler} from './stream_handler';\n\nexport class SignalFxDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.authToken = instanceSettings.jsonData.accessToken;\n    this.headers = {'Content-Type': 'application/json'};\n    this.headers['X-SF-TOKEN'] = this.authToken;\n    this.endpoint = instanceSettings.url.replace(/^(http)(s)?:/, function(match, p1, p2) {\n      return 'ws' + (p2 || '') + ':';\n    });\n    console.log('Using SignalFx at ' + this.endpoint);\n    this.signalflow = window.signalfx.streamer.SignalFlow(this.authToken, {\n      signalflowEndpoint: this.endpoint,\n    });\n    this.streams = [];\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, t => {return t.hide !== true;})\n    .map(t => this.templateSrv.replace(t.program, options.scopedVars, this.interpolateQueryStr));\n    var program = queries.join('\\n');\n\n    const aliases = this.collectAliases(options);\n    const programOptions = this.getProgramOptions(options);\n\n    // TODO: Better validation can be implemented here \n    if (!program) {\n      return Promise.resolve({data: []});\n    }\n\n    var handler = this.streams[options.panelId];\n    if (!handler) {\n      handler = new StreamHandler(this.signalflow, this.templateSrv);\n      this.streams[options.panelId] = handler;\n    }\n    return handler.start(program, aliases, programOptions, options);\n  }\n\n  collectAliases(options) {\n    return _.fromPairs(_.filter(options.targets, t => {return t.hide !== true && t.program && t.alias;})\n      .map(t => {return {program: this.templateSrv.replace(t.program, options.scopedVars || {}, this.interpolateQueryStr), alias: t.alias};})\n      .flatMap(t => this.extractLabelsWithAlias(t.program, t.alias)));\n  }\n\n  getMaxOption(options, property, default_value = 0) {\n    var value = _.max(_.map(options.targets, t => t[property]));\n    if (!value)\n      value = default_value;\n    return value;\n  }\n\n  getProgramOptions(options) {\n    return {\n      maxDelay: this.getMaxOption(options, 'maxDelay'),\n      resolutionMs: this.getMaxOption(options, 'resolutionMs'),\n      sampleSize: this.getMaxOption(options, 'sampleSize')\n    }\n  }\n\n  extractLabelsWithAlias(program, alias) {\n    const re = /label\\s?=\\s?'([\\w]*?)'/igm;\n    var labels = [];\n    var m;\n    do {\n        m = re.exec(program);\n        if (m) {\n          labels.push([m[1], alias]);\n        }\n    } while (m);\n    return labels;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/v2/metric',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  metricFindQuery(query) {\n    var metricNameQuery = query.match(/^metrics\\(([^\\)]*?)\\)/);\n    if (metricNameQuery) {\n      return this.getMetrics(this.templateSrv.replace(metricNameQuery[1]));\n    }\n    var propertyKeysQuery = query.match(/^property_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (propertyKeysQuery) {\n      return this.getPropertyKeys(this.templateSrv.replace(propertyKeysQuery[1]), this.templateSrv.replace(propertyKeysQuery[3]));\n    }\n    var propertyValuesQuery = query.match(/^property_values\\(([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/);\n    if (propertyValuesQuery) {\n      return this.getPropertyValues(this.templateSrv.replace(propertyValuesQuery[1]), this.templateSrv.replace(propertyValuesQuery[2]), this.templateSrv.replace(propertyValuesQuery[4]));\n    }\n    var tagsQuery = query.match(/^tags\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (tagsQuery) {\n      return this.getTags(this.templateSrv.replace(tagsQuery[1]), this.templateSrv.replace(tagsQuery[3]));\n    }\n    // var globalTagsQuery = query.match(/^tags\\(([^\\)]*?)\\)/);\n    // if (globalTagsQuery) {\n    //   return this.getGlobalTags(this.templateSrv.replace(globalTagsQuery[1]));\n    // }\n    this.q.when([]);\n  }\n\n  getMetrics(query) {\n    return this.doQueryRequest('/v2/metric', 'name:' + (query ? query : '*'))\n      .then(this.mapMetricsToTextValue);\n  }\n\n  mapMetricsToTextValue(result) {\n    return _.map(result.data.results, d => {\n      return { text: d.name, value: d.name };\n    });\n  }\n\n  getPropertyKeys(metric, partialInput) {\n    return this.doSuggestQueryRequest(metric, null, partialInput)\n      .then(this.mapPropertiesToTextValue);\n  }\n\n  getPropertyValues(metric, propertyKey, partialInput) {\n    return this.doSuggestQueryRequest(metric, propertyKey, partialInput)\n      .then(this.mapPropertiesToTextValue);\n  }\n\n  getTags(metric, partialInput) {\n    return this.doSuggestQueryRequest(metric, 'sf_tags', partialInput)\n      .then(this.mapPropertiesToTextValue);\n  }\n\n  mapPropertiesToTextValue(result) {\n    return _.map(result.data, d => {\n      return { text: d, value: d };\n    });\n  }\n\n  // getGlobalTags(query) {\n  //   return this.doQueryRequest('/v2/tag', query)\n  //     .then(this.mapMetricsToTextValue);\n  // }\n\n  doQueryRequest(path, query) {\n    return this.doRequest({\n      url: this.url + path,\n      params: {query: this.escapeQuery(query), limit: 100},\n      method: 'GET',\n    });\n  }\n\n  doSuggestQueryRequest(metric, property, partialInput) {\n    var program = {\n      programText: 'data(\\'' + metric +'\\').publish(label=\\'A\\')',\n      packageSpecifications: ''\n    };\n    var request = {\n      programs: [program],\n      property,\n      partialInput: partialInput != null ? partialInput : '',\n      limit: 100,\n      additionalFilters: [],\n      additionalReplaceOnlyFilters:[],\n      additionalQuery: null\n    };\n    return this.doRequest({\n      url: this.url + '/v2/suggest/_signalflowsuggest',\n      data: JSON.stringify(request),\n      method: 'POST'\n    });\n  }\n\n  escapeQuery(query) {\n    return query.replace(/[\\/]/g, '\\\\$&');\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  interpolateQueryStr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  quoteLiteral(value) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n}\n"]}